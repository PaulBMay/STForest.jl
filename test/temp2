using STForest

using Random
using LinearAlgebra
using Plots
using CSV, DataFrames
using Distributions

#

n = 5000
nUnq = Integer(floor(n / 4))

Random.seed!(96)

locUnq = rand(nUnq, 2)
loc = locUnq[sample(1:nUnq, n), :]
time = rand(n,1)

#

posparams = (beta = 5, sw1 = 1, rangeS1 = 0.2, rangeT1 = 1, sw2 = 2, rangeT2 = 0.5, tSq = 0.01)
zparams = (beta = 2, sw1 = 4, rangeS1 = 0.3, rangeT1 = 1, sw2 = 10, rangeS2 = 0.1)

m = 25

#

z = simulate_Bernoulli2(loc, time, zparams, m)

nKnots = 10
ypos = simulate_Continuous(loc, time, nKnots, posparams, m)

y = ypos .* z

X = ones(n, 1)

data = InputData(y, X, loc, time)

zdata, posdata = datasplit(data)

#

outDir = "./test/dump/"

if !isdir(outDir)
    mkdir(outDir)
end

priors_z = (theta10 = [1, 0.1, 1], alpha10 = [0.5, 0.5, 0.5], theta20 = [5, 0.1], alpha20 = [0.5, 0.5], beta = [1 1])

thetaVar_z = 1e-3*Matrix(I,5,5)

nSampsBurn = 1000
nSamps = 5000

NNGP_Bernoulli2(zdata, m, zparams, priors_z, thetaVar_z, outDir, nSampsBurn, thetalog = true)

thetaVar_z = getPropVars("./test/dump/zparams.csv", ["sw1", "rangeS1", "rangeT1", "sw2", "rangeS2"], 1000)

NNGP_Bernoulli2(zdata, m, zparams, priors_z, thetaVar_z, outDir, nSamps, thetalog = true)


pardf_z= CSV.read("./test/dump/zparams.csv", DataFrame)

plot(pardf_z.sw1)
plot(pardf_z.rangeS1)
plot(pardf_z.rangeT1)
plot(pardf_z.sw2)
plot(pardf_z.rangeS2)
plot(pardf_z.beta_0)

rm(outDir, recursive = true)